// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musician.Context;

namespace Musician.Migrations
{
    [DbContext(typeof(MusicContext))]
    [Migration("20220906111732_ComleteDAL")]
    partial class ComleteDAL
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InstrumentMusiciann", b =>
                {
                    b.Property<string>("InstrumentsName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MusiciansId")
                        .HasColumnType("int");

                    b.HasKey("InstrumentsName", "MusiciansId");

                    b.HasIndex("MusiciansId");

                    b.ToTable("InstrumentMusiciann");
                });

            modelBuilder.Entity("Musician.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MusicianId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MusicianId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Musician.Models.AlbumSong", b =>
                {
                    b.Property<string>("TitleSong")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.HasKey("TitleSong");

                    b.HasIndex("AlbumId")
                        .IsUnique();

                    b.ToTable("AlbumSongs");
                });

            modelBuilder.Entity("Musician.Models.Instrument", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("Musician.Models.Musiciann", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("Musician.Models.Song", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlbumSongTitleSong")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Title");

                    b.HasIndex("AlbumSongTitleSong");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusiciannSong", b =>
                {
                    b.Property<int>("MusiciansId")
                        .HasColumnType("int");

                    b.Property<string>("SongsTitle")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MusiciansId", "SongsTitle");

                    b.HasIndex("SongsTitle");

                    b.ToTable("MusiciannSong");
                });

            modelBuilder.Entity("InstrumentMusiciann", b =>
                {
                    b.HasOne("Musician.Models.Instrument", null)
                        .WithMany()
                        .HasForeignKey("InstrumentsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musician.Models.Musiciann", null)
                        .WithMany()
                        .HasForeignKey("MusiciansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musician.Models.Album", b =>
                {
                    b.HasOne("Musician.Models.Musiciann", "Musician")
                        .WithMany("Albums")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("Musician.Models.AlbumSong", b =>
                {
                    b.HasOne("Musician.Models.Album", "Album")
                        .WithOne("AlbumSong")
                        .HasForeignKey("Musician.Models.AlbumSong", "AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Musician.Models.Song", b =>
                {
                    b.HasOne("Musician.Models.AlbumSong", "AlbumSong")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumSongTitleSong");

                    b.Navigation("AlbumSong");
                });

            modelBuilder.Entity("MusiciannSong", b =>
                {
                    b.HasOne("Musician.Models.Musiciann", null)
                        .WithMany()
                        .HasForeignKey("MusiciansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musician.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musician.Models.Album", b =>
                {
                    b.Navigation("AlbumSong");
                });

            modelBuilder.Entity("Musician.Models.AlbumSong", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Musician.Models.Musiciann", b =>
                {
                    b.Navigation("Albums");
                });
#pragma warning restore 612, 618
        }
    }
}
